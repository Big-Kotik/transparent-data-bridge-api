// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bridge_relay_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransparentDataRelayServiceClient is the client API for TransparentDataRelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransparentDataRelayServiceClient interface {
	RegisterServer(ctx context.Context, in *Auth, opts ...grpc.CallOption) (TransparentDataRelayService_RegisterServerClient, error)
	ReceiveChunks(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (TransparentDataRelayService_ReceiveChunksClient, error)
}

type transparentDataRelayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransparentDataRelayServiceClient(cc grpc.ClientConnInterface) TransparentDataRelayServiceClient {
	return &transparentDataRelayServiceClient{cc}
}

func (c *transparentDataRelayServiceClient) RegisterServer(ctx context.Context, in *Auth, opts ...grpc.CallOption) (TransparentDataRelayService_RegisterServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransparentDataRelayService_ServiceDesc.Streams[0], "/proto.TransparentDataRelayService/RegisterServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &transparentDataRelayServiceRegisterServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransparentDataRelayService_RegisterServerClient interface {
	Recv() (*SendFileRequest, error)
	grpc.ClientStream
}

type transparentDataRelayServiceRegisterServerClient struct {
	grpc.ClientStream
}

func (x *transparentDataRelayServiceRegisterServerClient) Recv() (*SendFileRequest, error) {
	m := new(SendFileRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transparentDataRelayServiceClient) ReceiveChunks(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (TransparentDataRelayService_ReceiveChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransparentDataRelayService_ServiceDesc.Streams[1], "/proto.TransparentDataRelayService/ReceiveChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &transparentDataRelayServiceReceiveChunksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransparentDataRelayService_ReceiveChunksClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type transparentDataRelayServiceReceiveChunksClient struct {
	grpc.ClientStream
}

func (x *transparentDataRelayServiceReceiveChunksClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransparentDataRelayServiceServer is the server API for TransparentDataRelayService service.
// All implementations must embed UnimplementedTransparentDataRelayServiceServer
// for forward compatibility
type TransparentDataRelayServiceServer interface {
	RegisterServer(*Auth, TransparentDataRelayService_RegisterServerServer) error
	ReceiveChunks(*SendFileRequest, TransparentDataRelayService_ReceiveChunksServer) error
	mustEmbedUnimplementedTransparentDataRelayServiceServer()
}

// UnimplementedTransparentDataRelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransparentDataRelayServiceServer struct {
}

func (UnimplementedTransparentDataRelayServiceServer) RegisterServer(*Auth, TransparentDataRelayService_RegisterServerServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedTransparentDataRelayServiceServer) ReceiveChunks(*SendFileRequest, TransparentDataRelayService_ReceiveChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveChunks not implemented")
}
func (UnimplementedTransparentDataRelayServiceServer) mustEmbedUnimplementedTransparentDataRelayServiceServer() {
}

// UnsafeTransparentDataRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransparentDataRelayServiceServer will
// result in compilation errors.
type UnsafeTransparentDataRelayServiceServer interface {
	mustEmbedUnimplementedTransparentDataRelayServiceServer()
}

func RegisterTransparentDataRelayServiceServer(s grpc.ServiceRegistrar, srv TransparentDataRelayServiceServer) {
	s.RegisterService(&TransparentDataRelayService_ServiceDesc, srv)
}

func _TransparentDataRelayService_RegisterServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Auth)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransparentDataRelayServiceServer).RegisterServer(m, &transparentDataRelayServiceRegisterServerServer{stream})
}

type TransparentDataRelayService_RegisterServerServer interface {
	Send(*SendFileRequest) error
	grpc.ServerStream
}

type transparentDataRelayServiceRegisterServerServer struct {
	grpc.ServerStream
}

func (x *transparentDataRelayServiceRegisterServerServer) Send(m *SendFileRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _TransparentDataRelayService_ReceiveChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransparentDataRelayServiceServer).ReceiveChunks(m, &transparentDataRelayServiceReceiveChunksServer{stream})
}

type TransparentDataRelayService_ReceiveChunksServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type transparentDataRelayServiceReceiveChunksServer struct {
	grpc.ServerStream
}

func (x *transparentDataRelayServiceReceiveChunksServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// TransparentDataRelayService_ServiceDesc is the grpc.ServiceDesc for TransparentDataRelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransparentDataRelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransparentDataRelayService",
	HandlerType: (*TransparentDataRelayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterServer",
			Handler:       _TransparentDataRelayService_RegisterServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveChunks",
			Handler:       _TransparentDataRelayService_ReceiveChunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge_relay_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bridge_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransparentDataBridgeServiceClient is the client API for TransparentDataBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransparentDataBridgeServiceClient interface {
	SendChunks(ctx context.Context, opts ...grpc.CallOption) (TransparentDataBridgeService_SendChunksClient, error)
}

type transparentDataBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransparentDataBridgeServiceClient(cc grpc.ClientConnInterface) TransparentDataBridgeServiceClient {
	return &transparentDataBridgeServiceClient{cc}
}

func (c *transparentDataBridgeServiceClient) SendChunks(ctx context.Context, opts ...grpc.CallOption) (TransparentDataBridgeService_SendChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransparentDataBridgeService_ServiceDesc.Streams[0], "/proto.TransparentDataBridgeService/SendChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &transparentDataBridgeServiceSendChunksClient{stream}
	return x, nil
}

type TransparentDataBridgeService_SendChunksClient interface {
	Send(*File) error
	CloseAndRecv() (*FileStatus, error)
	grpc.ClientStream
}

type transparentDataBridgeServiceSendChunksClient struct {
	grpc.ClientStream
}

func (x *transparentDataBridgeServiceSendChunksClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transparentDataBridgeServiceSendChunksClient) CloseAndRecv() (*FileStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransparentDataBridgeServiceServer is the server API for TransparentDataBridgeService service.
// All implementations must embed UnimplementedTransparentDataBridgeServiceServer
// for forward compatibility
type TransparentDataBridgeServiceServer interface {
	SendChunks(TransparentDataBridgeService_SendChunksServer) error
	mustEmbedUnimplementedTransparentDataBridgeServiceServer()
}

// UnimplementedTransparentDataBridgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransparentDataBridgeServiceServer struct {
}

func (UnimplementedTransparentDataBridgeServiceServer) SendChunks(TransparentDataBridgeService_SendChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method SendChunks not implemented")
}
func (UnimplementedTransparentDataBridgeServiceServer) mustEmbedUnimplementedTransparentDataBridgeServiceServer() {
}

// UnsafeTransparentDataBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransparentDataBridgeServiceServer will
// result in compilation errors.
type UnsafeTransparentDataBridgeServiceServer interface {
	mustEmbedUnimplementedTransparentDataBridgeServiceServer()
}

func RegisterTransparentDataBridgeServiceServer(s grpc.ServiceRegistrar, srv TransparentDataBridgeServiceServer) {
	s.RegisterService(&TransparentDataBridgeService_ServiceDesc, srv)
}

func _TransparentDataBridgeService_SendChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransparentDataBridgeServiceServer).SendChunks(&transparentDataBridgeServiceSendChunksServer{stream})
}

type TransparentDataBridgeService_SendChunksServer interface {
	SendAndClose(*FileStatus) error
	Recv() (*File, error)
	grpc.ServerStream
}

type transparentDataBridgeServiceSendChunksServer struct {
	grpc.ServerStream
}

func (x *transparentDataBridgeServiceSendChunksServer) SendAndClose(m *FileStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transparentDataBridgeServiceSendChunksServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransparentDataBridgeService_ServiceDesc is the grpc.ServiceDesc for TransparentDataBridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransparentDataBridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransparentDataBridgeService",
	HandlerType: (*TransparentDataBridgeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendChunks",
			Handler:       _TransparentDataBridgeService_SendChunks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bridge_service.proto",
}
